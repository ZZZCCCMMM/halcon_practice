<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="23.05.0.0">
<procedure name="main">
<interface/>
<body>
<c>* This program is intended to help you if the barcode reader</c>
<c>* fails to find and/or decode a barcode. It shows how to debug</c>
<c>* the crucial steps of the decoding. First, you have to find</c>
<c>* out at which stage of the bar code reading an error occurs.</c>
<c>* This is done by looking at intermediate results.</c>
<c>* You can obtain intermediate results at two stages:</c>
<c>* - check the candidate regions</c>
<c>* - check the scanlines</c>
<c>* Based on typical image defects, the program shows how to</c>
<c>* solve the decoding task - even with bad image data.</c>
<c>* </c>
<l>dev_set_draw ('margin')</l>
<l>dev_update_window ('off')</l>
<l>dev_set_line_width (2)</l>
<c>* </c>
<c>* Case 0</c>
<c>* The bar code can be read without any problems</c>
<l>CodeType := 'EAN-13'</l>
<l>read_bar_code_image_and_initialize (Image, 'Case 0: The bar code can be read', 'barcode/ean13/ean1301', BarCodeHandle, WindowHandle)</l>
<l>try_to_find_bar_code (Image, SymbolRegions, BarCodeHandle, WindowHandle, CodeType, DecodedDataStrings, CodeIsReadable)</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<l>disp_bar_code_candidates (BarCodeHandle, WindowHandle, NumberCandidates)</l>
<l>disp_bar_code_scanlines (BarCodeHandle, WindowHandle)</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<l>clear_bar_code_model (BarCodeHandle)</l>
<c>* </c>
<c>* Case 1</c>
<c>* Problem: The contrast in the image is low</c>
<l>read_bar_code_image_and_initialize (Image, 'Case 1: The contrast in the image is low', 'barcode/ean13/ean13_to_preprocess_04', BarCodeHandle, WindowHandle)</l>
<l>try_to_find_bar_code (Image, SymbolRegions, BarCodeHandle, WindowHandle, CodeType, DecodedDataStrings, CodeIsReadable)</l>
<l>disp_bar_code_candidates (BarCodeHandle, WindowHandle, NumberCandidates7)</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<c>* Solution: Enhance contrast by scaling gray value range</c>
<l>scale_image_range (Image, ScaledImage, 0, 20)</l>
<l>dev_display (ScaledImage)</l>
<l>disp_message (WindowHandle, 'Solution: Enhance contrast by scaling gray value range', 'window', 12, 12, 'black', 'true')</l>
<l>try_to_find_bar_code (ScaledImage, SymbolRegions, BarCodeHandle, WindowHandle, CodeType, DecodedDataStrings, CodeIsReadable)</l>
<l>disp_bar_code_candidates (BarCodeHandle, WindowHandle, NumberCandidates8)</l>
<l>disp_bar_code_scanlines (BarCodeHandle, WindowHandle)</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<l>clear_bar_code_model (BarCodeHandle)</l>
<c>* </c>
<c>* Case 2</c>
<c>* Problem: The illumination is inhomogeneous</c>
<l>read_bar_code_image_and_initialize (Image, 'Case 2: The illumination is inhomogeneous', 'barcode/ean13/ean13_to_preprocess_06', BarCodeHandle, WindowHandle)</l>
<l>try_to_find_bar_code (Image, SymbolRegions, BarCodeHandle, WindowHandle, CodeType, DecodedDataStrings, CodeIsReadable)</l>
<l>disp_bar_code_candidates (BarCodeHandle, WindowHandle, NumberCandidates10)</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<c>* </c>
<c>* Solution: Decrease meas_thresh</c>
<c>* Note that in this example decreasing meas_thresh to a very low value can only</c>
<c>* be effective by deactivating measure_thresh_abs (i.e. setting it to 0.0).</c>
<c>* Otherwise, measure_thresh_abs sets a default value of 5.0.</c>
<l>dev_display (Image)</l>
<l>disp_message (WindowHandle, 'Solution: Decrease meas_thresh (+measure_thresh_abs)', 'window', 12, 12, 'black', 'true')</l>
<l>set_bar_code_param (BarCodeHandle, 'meas_thresh_abs', 0.0)</l>
<l>set_bar_code_param (BarCodeHandle, 'meas_thresh', 0.02)</l>
<l>try_to_find_bar_code (Image, SymbolRegions, BarCodeHandle, WindowHandle, CodeType, DecodedDataStrings, CodeIsReadable)</l>
<l>disp_bar_code_candidates (BarCodeHandle, WindowHandle, NumberCandidates11)</l>
<l>disp_bar_code_scanlines (BarCodeHandle, WindowHandle)</l>
<l>clear_bar_code_model (BarCodeHandle)</l>
<c>* </c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="read_bar_code_image_and_initialize">
<interface>
<oo>
<par name="Image" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="Message" base_type="ctrl" dimension="0"/>
<par name="FileName" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="BarCodeHandle" base_type="ctrl" dimension="0"/>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>read_image (Image, FileName)</l>
<l>create_bar_code_model ([], [], BarCodeHandle)</l>
<l>set_bar_code_param (BarCodeHandle, 'persistence', 1)</l>
<l>dev_close_window ()</l>
<l>dev_open_window_fit_image (Image, 0, 0, -1, -1, WindowHandle)</l>
<l>set_display_font (WindowHandle, 14, 'mono', 'true', 'false')</l>
<l>dev_display (Image)</l>
<l>dev_set_color ('green')</l>
<l>disp_message (WindowHandle, Message, 'window', 12, 12, 'black', 'true')</l>
<l>return ()</l>
</body>
<docu id="read_bar_code_image_and_initialize">
<parameters>
<parameter id="BarCodeHandle"/>
<parameter id="FileName"/>
<parameter id="Image"/>
<parameter id="Message"/>
<parameter id="WindowHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="try_to_find_bar_code">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="SymbolRegions" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="BarCodeHandle" base_type="ctrl" dimension="0"/>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
<par name="CodeType" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="DecodedDataStrings" base_type="ctrl" dimension="0"/>
<par name="CodeIsReadable" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>find_bar_code (Image, SymbolRegions, BarCodeHandle, CodeType, DecodedDataStrings)</l>
<l>dev_set_color ('green')</l>
<l>dev_display (SymbolRegions)</l>
<l>CodeIsReadable := DecodedDataStrings != []</l>
<l>if (CodeIsReadable)</l>
<l>    disp_message (WindowHandle, 'Code:' + DecodedDataStrings, 'window', 32, 12, 'forest green', 'true')</l>
<l>else</l>
<l>    disp_message (WindowHandle, 'Code: not readable', 'window', 32, 12, 'red', 'true')</l>
<l>endif</l>
<l>return ()</l>
</body>
<docu id="try_to_find_bar_code">
<parameters>
<parameter id="BarCodeHandle"/>
<parameter id="CodeIsReadable"/>
<parameter id="CodeType"/>
<parameter id="DecodedDataStrings"/>
<parameter id="Image"/>
<parameter id="SymbolRegions"/>
<parameter id="WindowHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="disp_bar_code_candidates">
<interface>
<ic>
<par name="BarCodeHandle" base_type="ctrl" dimension="0"/>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="NumberCandidates" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>get_bar_code_object (Candidates, BarCodeHandle, 'all', 'candidate_regions')</l>
<l>count_obj (Candidates, NumberCandidates)</l>
<l>if (NumberCandidates == 0)</l>
<l>    disp_message (WindowHandle, 'No candidates found', 'window', 32, 12, 'red', 'true')</l>
<l>else</l>
<l>    dev_set_color ('magenta')</l>
<l>    dev_display (Candidates)</l>
<l>    disp_message (WindowHandle, 'Candidates: ' + NumberCandidates, 'window', 52, 12, 'magenta', 'true')</l>
<l>endif</l>
<l>return ()</l>
</body>
<docu id="disp_bar_code_candidates">
<parameters>
<parameter id="BarCodeHandle"/>
<parameter id="NumberCandidates"/>
<parameter id="WindowHandle"/>
</parameters>
</docu>
</procedure>
<procedure name="disp_bar_code_scanlines">
<interface>
<ic>
<par name="BarCodeHandle" base_type="ctrl" dimension="0"/>
<par name="WindowHandle" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* </c>
<l>get_bar_code_result (BarCodeHandle, 'all', 'decoded_types', DecodedTypes)</l>
<l>if (|DecodedTypes| == 0)</l>
<l>    get_bar_code_object (AllScanlines, BarCodeHandle, 'all', 'scanlines_all')</l>
<l>    dev_set_color ('red')</l>
<l>    dev_display (AllScanlines)</l>
<l>    disp_message (WindowHandle, 'No valid scanlines found', 'window', 72, 12, 'red', 'true')</l>
<l>else</l>
<l>    get_bar_code_object (ValidScanlines, BarCodeHandle, 0, 'scanlines_valid')</l>
<l>    dev_set_color ('green')</l>
<l>    dev_display (ValidScanlines)</l>
<l>    disp_message (WindowHandle, 'Valid scanlines detected', 'window', 72, 12, 'forest green', 'true')</l>
<l>endif</l>
<l>return ()</l>
</body>
<docu id="disp_bar_code_scanlines">
<parameters>
<parameter id="BarCodeHandle"/>
<parameter id="WindowHandle"/>
</parameters>
</docu>
</procedure>
</hdevelop>
